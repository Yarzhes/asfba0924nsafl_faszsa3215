#!/usr/bin/env python3
"""
Telegram Integration Test Script
Tests the Telegram bot connection and message sending functionality.
"""

import os
import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from ultra_signals.core.config import load_settings
from ultra_signals.transport.telegram import send_message

def test_telegram_connection():
    """Test Telegram bot connection and send a test message."""
    print("🤖 Testing Telegram Integration...")
    print("=" * 50)
    
    # Check environment variables
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    chat_id = os.getenv('TELEGRAM_CHAT_ID')
    
    print(f"Bot Token: {'✅ Set' if bot_token else '❌ Missing'}")
    print(f"Chat ID: {'✅ Set (' + chat_id + ')' if chat_id else '❌ Missing'}")
    
    if not bot_token or not chat_id:
        print("\n❌ Telegram credentials not found!")
        print("Please run: .\\scripts\\setup_telegram.ps1")
        return False
    
    # Load settings
    try:
        settings = load_settings()
        print(f"Settings loaded: ✅")
        print(f"Telegram enabled: {settings.transport.telegram.enabled}")
        print(f"Dry run mode: {settings.transport.dry_run}")
    except Exception as e:
        print(f"❌ Failed to load settings: {e}")
        return False
    
    # Test message
    test_message = """🧪 **Telegram Test Message**

✅ **Bot Status**: Connected
🤖 **Bot Token**: 8360503431:***
💬 **Chat ID**: {chat_id}
⚡ **System**: Trading Helper Sniper Mode
📅 **Date**: {date}

🚀 **Ready for Shadow Testing!**

This is a test message to verify Telegram integration is working correctly for your sniper mode signals.

*Generated by: scripts/test_telegram.py*""".format(
        chat_id=chat_id,
        date="2025-08-28"
    )
    
    print("\n📤 Sending test message...")
    try:
        # Temporarily disable dry run for this test
        original_dry_run = settings.transport.dry_run
        settings.transport.dry_run = False
        
        success = send_message(test_message, settings)
        
        # Restore original dry run setting
        settings.transport.dry_run = original_dry_run
        
        if success:
            print("✅ Test message sent successfully!")
            print("📱 Check your Telegram chat for the message.")
            return True
        else:
            print("❌ Failed to send test message.")
            return False
            
    except Exception as e:
        print(f"❌ Error sending message: {e}")
        return False

def main():
    """Main test function."""
    print("🚀 Telegram Integration Test")
    print("=" * 50)
    
    success = test_telegram_connection()
    
    print("\n" + "=" * 50)
    if success:
        print("🎉 Telegram integration is working!")
        print("✅ Your shadow tests will send notifications to Telegram.")
        print("\n🔄 Next steps:")
        print("   1. Run shadow test: python scripts/run_shadow_test.py --duration 120")
        print("   2. Monitor in real-time: python scripts/monitor_shadow.py --duration 120")
        print("   3. Check Telegram for signal notifications")
    else:
        print("❌ Telegram integration failed.")
        print("🔧 Please check your credentials and try again.")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
